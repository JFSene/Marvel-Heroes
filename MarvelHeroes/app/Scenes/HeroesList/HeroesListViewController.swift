//
//  HeroesListViewController.swift
//  MarvelHeroes
//
//  Created by Joel Sene on 29/01/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HeroesListDisplayLogic: class
{
  func displayHeroesList(viewModel: HeroesList.Models.ViewModel)
}

class HeroesListViewController: UIViewController, HeroesListDisplayLogic
{
    
  var interactor: HeroesListBusinessLogic?
  var router: (NSObjectProtocol & HeroesListRoutingLogic & HeroesListDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = HeroesListInteractor()
    let presenter = HeroesListPresenter()
    let router = HeroesListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    callHeroesListAPI()
  }
  
  // MARK: Do something
  
    @IBOutlet weak var nameLabel: UILabel!
    var dataSource: HeroArray?
    
  func callHeroesListAPI()
  {
    let request = HeroesList.Models.Request()
    interactor?.doHeroesList(request: request)
  }
  
 
    func displayHeroesList(viewModel: HeroesList.Models.ViewModel) {
            self.dataSource = viewModel.heroList
            self.nameLabel.text = self.dataSource?.heroList[0]?.name
            print(viewModel.heroList)
        
    }
}
